# -*- coding: utf-8 -*-
"""Bab 2 (Data manipulation).ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1_G1_zjXLkJNmFrYoWu11YMOpf1uepxhD
"""

### Untuk memulai platform PYTORCH, kita dapat memanggil modul torch ###
### Sebuah tensor merepresentasikan sebuah (multi dimensi) susunan dengan nilai-nilai numerik di dalamnya ####
### Sebuah susunan nilai-nilai numerik dengan satu sumbu atas sebuah tensor dapat disebut sebagai sebuah vektor ###
### Sebuah tensor yang memiliki dua sumbu disebut sebagai sebuah matriks ###
### Sebuah tensor yang memiliki sejumlah sumbu katakanlah k sumbu, maka dapat disebut sebagai tensor dengan orde-k ###
import torch

### Untuk membuat sebuah vektor dalam platform PYTORCH, kita dapat membuat susunan nilai-nilai numerik di dalanya yang dimulai dari 0 sampai dengan n###
x = torch.arange(12, dtype=torch.float32)
print (x)

### Kita dapat mengecek ukuran sebuah tensor (panjang data atas tiap sumbu) dengan melakukan inspeksi properti bentuk (shape) sebuah tensor ###
x.shape

### Jika kita ingin mengetahui jumlah elemn di dalam sebuah tensor, yaitu hasil perkalian dari ukuran elemen-elemen didalamnya dengan perintah sebagai berikut ###
x.numel()

### Untuk merubah bentuk dari sebuah tersor tanpa mengubah jumlah elemen-elemennya atau nilai-nilainya, kita dapat menggunakan modul berikut ini ####
X = x.reshape(3, 4)
print(X)

### Selanjutnya jika kita ingin menginisialisasikan matriks X di atas dengan mengganti input nilai numeriknya dengan nol, satu ataupun suatu konstanta, kita dapat menggunakan modul berikut ini ###
torch.zeros((2, 3, 4))

torch.ones((2, 3, 4))

### Seringkali, kita ingin menginput nilai -nilai numerik secara random atas elemen-elemen di dalam sebuah tensor dengan distribusi probabilitas tertentu ###
### Sebagai contoh, kita akan mengisi setiap elemen secara random terdistribusi normal ( mean = 0, dan sd =1) dalam tensor dengan ukuran 3  untuk keempat vektor di bawah ini###
torch.randn(3, 4)

### Kita juga dapat membuat setiap elemen dalam tensor dalam bentuk tensor juga, yang ditunjukkan sbagai berikut ###
torch.tensor([[2,1,4,3],[1,2,3,4],[4,3,2,1]])
